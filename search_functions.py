from typing import Dict, Any, List
from google.cloud import discoveryengine_v1
from config import config
from logger import get_logger
from gcp_clients import clients
from utils import clean_html_text, get_file_emoji, extract_filename_from_title, split_snippet_to_bullets, format_summary

logger = get_logger(__name__)


def _create_search_request(query: str) -> discoveryengine_v1.SearchRequest:
    serving_config = (
        f"projects/{config.PROJECT_ID}/locations/{config.LOCATION}/collections/default_collection/"
        f"engines/{config.SEARCH_ENGINE_ID}/servingConfigs/default_search"
    )

    summary_spec = discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec(
        summary_result_count=10,
        include_citations=True,
        ignore_adversarial_query=True,
        ignore_non_summary_seeking_query=True,
        model_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec.ModelSpec(
            version="stable"
        ),
        model_prompt_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec.ModelPromptSpec(
            preamble=(
                f"–°—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ –¥–ª—è –∑–∞–ø–∏—Ç—É '{query}'. "
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¢–Ü–õ–¨–ö–ò —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É. "
                "–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ —è–∫ —Å–ø–∏—Å–æ–∫ –∑ bullet points, –∫–æ–∂–µ–Ω –ø—É–Ω–∫—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '‚Ä¢'. "
                "–ú–∞–∫—Å–∏–º—É–º 30 —Ä–µ—á–µ–Ω—å. –§–æ–∫—É—Å—É–π—Ç–µ—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –¥–µ—Ç–∞–ª—è—Ö."
            )
        )
    )

    return discoveryengine_v1.SearchRequest(
        serving_config=serving_config,
        query=query,
        page_size=10,
        language_code="uk-UA",
        user_info=discoveryengine_v1.UserInfo(
            user_id="chatbot_user",
            time_zone="Europe/Kiev"
        ),
        spell_correction_spec=discoveryengine_v1.SearchRequest.SpellCorrectionSpec(
            mode=discoveryengine_v1.SearchRequest.SpellCorrectionSpec.Mode.AUTO
        ),
        content_search_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec(
            snippet_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SnippetSpec(
                return_snippet=True,
                max_snippet_count=3
            ),
            summary_spec=summary_spec
        )
    )


def _process_search_results(response) -> tuple[str, List[Dict]]:
    summary_text = ""
    if hasattr(response, 'summary') and response.summary:
        if hasattr(response.summary, 'summary_text') and response.summary.summary_text:
            summary_text = response.summary.summary_text

    results = []
    for result in response.results:
        document = result.document
        title, snippet, link = "", "", ""

        if hasattr(document, 'derived_struct_data'):
            derived_data = dict(document.derived_struct_data)
            title = derived_data.get("title", "")
            link = derived_data.get("link", "")

            snippets_array = derived_data.get("snippets", [])
            if snippets_array:
                snippet_parts = []
                for snippet_obj in snippets_array:
                    snippet_dict = dict(snippet_obj)
                    if snippet_dict.get("snippet_status") == "SUCCESS":
                        clean_text = clean_html_text(snippet_dict.get("snippet", ""))
                        if clean_text:
                            snippet_parts.append(clean_text)
                snippet = " ".join(snippet_parts)

        filename = extract_filename_from_title(title)
        results.append({
            "title": filename,
            "snippet": snippet or "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π",
            "link": link
        })

    return summary_text, results


def _format_search_results(results: List[Dict], query: str, summary: str = None) -> str:
    header = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è: `{query}`\n"
    response_parts = [header]

    if summary:
        summary_section = f"\nüìÑ –ü—ñ–¥—Å—É–º–æ–∫:\n{summary}\n"
        response_parts.append(summary_section)
        response_parts.append("\nüìã –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n")

    formatted_items = []
    for result in results:
        title = result["title"]
        snippet = result["snippet"]
        link = result["link"]

        if link.startswith("gs://"):
            path = link.replace("gs://", "")
            link = f"https://storage.cloud.google.com/{path}"

        filename = extract_filename_from_title(title)
        item_text = f"üìé **{filename}**\n{link}\n"

        if snippet and snippet != "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π":
            snippet_parts = split_snippet_to_bullets(snippet)
            for part in snippet_parts:
                item_text += f"‚Ä¢ {part}\n"
        else:
            item_text += "‚Ä¢ _–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π_\n"

        formatted_items.append(item_text.rstrip())

    if formatted_items:
        response_parts.append("\n\n".join(formatted_items))

    footer = "\n\nüí° –ü–æ—Ä–∞–¥–∏:\n‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–∞–∑–≤—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É\n‚Ä¢ –£—Ç–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
    response_parts.append(footer)

    return "".join(response_parts)


def search_vertex_ai_structured(query: str) -> Dict[str, Any]:
    try:
        client = clients.get_search_client()
        request = _create_search_request(query)
        response = client.search(request=request)

        logger.info("üîç –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ Vertex AI")

        summary_text, results = _process_search_results(response)

        logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        return {
            "query": query,
            "summary": format_summary(summary_text) if summary_text else "",
            "results": results,
            "total_results": len(results)
        }

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–æ—à—É–∫—É: {e}")
        raise e


def search_vertex_ai(query: str) -> str:
    try:
        search_data = search_vertex_ai_structured(query)

        if not search_data["results"]:
            return "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n\n–°–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–∏–Ω–æ–Ω—ñ–º–∏\n‚Ä¢ –°–∫–æ—Ä–æ—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç"

        formatted_summary = search_data["summary"] if search_data["summary"] else None
        return _format_search_results(search_data["results"], query, formatted_summary)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É\n\n–î–µ—Ç–∞–ª—ñ: {e}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."