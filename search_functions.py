"""
–ú–æ–¥—É–ª—å –¥–ª—è Vertex AI Search –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Summary –¥–ª—è Cloud Function
"""

import logging
import os
import re
from typing import Dict, Any, List
from google.cloud import discoveryengine_v1

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
PROJECT_ID = os.getenv("PROJECT_ID", "dulcet-path-462314-f8")
LOCATION = os.getenv("LOCATION", "eu")
SEARCH_ENGINE_ID = os.getenv("SEARCH_ENGINE_ID", "ai-search-chat-bot_1749399060664")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def _clean_html_text(text: str) -> str:
    """–û—á–∏—â—É—î HTML —Ç–µ–≥–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –∑ —Ç–µ–∫—Å—Ç—É."""
    if not text:
        return ""

    # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
    clean_text = re.sub(r'<[^>]+>', '', text)

    # –ó–∞–º—ñ–Ω—é—î–º–æ HTML entities
    clean_text = clean_text.replace('&nbsp;', ' ')
    clean_text = clean_text.replace('&#39;', "'")
    clean_text = clean_text.replace('&quot;', '"')
    clean_text = clean_text.replace('&amp;', '&')
    clean_text = clean_text.replace('&lt;', '<')
    clean_text = clean_text.replace('&gt;', '>')

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    clean_text = ' '.join(clean_text.split())

    return clean_text.strip()


def _split_snippet_to_bullets(snippet: str, max_length: int = 120) -> List[str]:
    """–†–æ–∑–±–∏–≤–∞—î –¥–æ–≤–≥–∏–π snippet –Ω–∞ bullet points."""
    if len(snippet) <= max_length:
        return [snippet]

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
    sentences = snippet.split('. ')
    bullets = []
    current_bullet = ""

    for sentence in sentences:
        sentence = sentence.strip()
        if not sentence:
            continue

        # –î–æ–¥–∞—î–º–æ –∫—Ä–∞–ø–∫—É —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if not sentence.endswith('.'):
            sentence += '.'

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π bullet
        if len(current_bullet + sentence) <= max_length:
            current_bullet += sentence + " "
        else:
            if current_bullet:
                bullets.append(current_bullet.strip())
            current_bullet = sentence + " "

    # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π bullet
    if current_bullet:
        bullets.append(current_bullet.strip())

    return bullets[:3]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 3 bullet points


def _format_summary(summary_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î summary —è–∫ bullet points."""
    if not summary_text:
        return ""

    # –û—á–∏—â—É—î–º–æ HTML
    clean_summary = _clean_html_text(summary_text)

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ bullet points
    # –í—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤
    sentences = []

    # –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ –∫—Ä–∞–ø—Ü—ñ –∑ –ø—Ä–æ–±—ñ–ª–æ–º
    parts = clean_summary.split('. ')

    for part in parts:
        part = part.strip()
        if part and len(part) > 15:  # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ —Ç–∏–ø—É [1], [2] —Ç–æ—â–æ
            part = re.sub(r'\[\d+\]', '', part)
            part = part.strip()

            if part:
                if not part.endswith('.'):
                    part += '.'
                sentences.append(part)

    # –§–æ—Ä–º—É—î–º–æ bullet points
    formatted_bullets = []
    for sentence in sentences[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 bullet points
        formatted_bullets.append(f"‚Ä¢ {sentence}")

    return "\n".join(formatted_bullets)


def _format_search_results(results: List[Dict], query: str, summary: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É —É –∫—Ä–∞—Å–∏–≤–æ–º—É –≤–∏–≥–ª—è–¥—ñ –∑ summary."""

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è:** `{query}`\n"

    response_parts = [header]

    # –î–æ–¥–∞—î–º–æ summary —è–∫—â–æ —î
    if summary:
        summary_section = f"\nüìÑ **–ü—ñ–¥—Å—É–º–æ–∫:**\n{summary}\n"
        response_parts.append(summary_section)

    # –î–æ–¥–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –ø–µ—Ä–µ–¥ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if summary:
        response_parts.append("\nüìã **–î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:**\n")

    formatted_items = []

    for i, result in enumerate(results, 1):
        title = result["title"] or f"–î–æ–∫—É–º–µ–Ω—Ç {i}"
        snippet = result["snippet"] or "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
        link = result["link"]

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è gs:// –Ω–∞ –ø—É–±–ª—ñ—á–Ω–µ https-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
        if link.startswith("gs://"):
            path = link.replace("gs://", "")
            link = f"https://storage.cloud.google.com/{path}"

        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –õ—ñ–Ω–∫ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        item_text = f"**{i}. [{title}]({link})**\n"

        # –î–æ–¥–∞—î–º–æ snippet –∑ bullet points –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        if snippet and snippet != "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π":
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–æ–≤–≥—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –Ω–∞ bullet points
            snippet_parts = _split_snippet_to_bullets(snippet)
            for part in snippet_parts:
                item_text += f"‚Ä¢ {part}\n"
        else:
            item_text += f"‚Ä¢ _–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π_\n"

        # –í–∏–¥–∞–ª—è—î–º–æ –æ–∫—Ä–µ–º–∏–π –ª—ñ–Ω–∫, —Ç–µ–ø–µ—Ä –≤—ñ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
        formatted_items.append(item_text.rstrip())

    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
    if formatted_items:
        response_parts.append("\n\n".join(formatted_items))

    # –î–æ–¥–∞—î–º–æ —Ñ—É—Ç–µ—Ä –∑ –ø–æ—Ä–∞–¥–∞–º–∏
    footer = "\n\nüí° **–ü–æ—Ä–∞–¥–∏:**\n‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–∞–∑–≤—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É\n‚Ä¢ –£—Ç–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
    response_parts.append(footer)

    return "".join(response_parts)


def search_vertex_ai(query: str) -> str:
    """–í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ Vertex AI Search –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Summary."""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Discovery Engine
        client_options = {"api_endpoint": f"{LOCATION}-discoveryengine.googleapis.com"}
        client = discoveryengine_v1.SearchServiceClient(client_options=client_options)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        serving_config = (
            f"projects/{PROJECT_ID}/locations/{LOCATION}/collections/default_collection/engines/{SEARCH_ENGINE_ID}/servingConfigs/default_search"
        )

        # –î–û–î–ê–ù–û: Summary Spec –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥—Å—É–º–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
        summary_spec = discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec(
            summary_result_count=5,  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è summary
            include_citations=True,  # –í–∫–ª—é—á–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞
            ignore_adversarial_query=True,  # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —à–∫—ñ–¥–ª–∏–≤—ñ –∑–∞–ø–∏—Ç–∏
            ignore_non_summary_seeking_query=True,  # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ —â–æ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å summary
            model_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec.ModelSpec(
                version="stable"  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å—Ç–∞–±—ñ–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é –º–æ–¥–µ–ª—ñ
            ),
            # –î–û–î–ê–ù–û: –ü—Ä–æ–º—Ç –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏
            model_prompt_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec.ModelPromptSpec(
                preamble="–ù–∞–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É, –Ω–µ –¥–æ–¥–∞–≤–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–æ—á–Ω–æ —Ç–∞–∫—ñ –∂ —Å–ª–æ–≤–∞ —è–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ—à—É–∫—É –∫–æ–ª–∏ —Ü–µ –º–æ–∂–ª–∏–≤–æ. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 20 —Ä–µ—á–µ–Ω—å. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —è–∫ —Å–ø–∏—Å–æ–∫ –∑ bullet points. –ö–æ–∂–µ–Ω –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫—É –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ —Å–∏–º–≤–æ–ª—É '‚Ä¢'."
            )
        )

        request = discoveryengine_v1.SearchRequest(
            serving_config=serving_config,
            query=query,
            page_size=5,
            # –í–ò–ü–†–ê–í–õ–ï–ù–û: language_code –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ SearchRequest, –ù–ï UserInfo
            language_code="uk-UA",  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
            user_info=discoveryengine_v1.UserInfo(
                user_id="chatbot_user",  # –ü—Ä–æ—Å—Ç–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
                time_zone="Europe/Kiev"  # –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞
            ),
            spell_correction_spec=discoveryengine_v1.SearchRequest.SpellCorrectionSpec(
                mode=discoveryengine_v1.SearchRequest.SpellCorrectionSpec.Mode.AUTO
            ),
            content_search_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec(
                snippet_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SnippetSpec(
                    return_snippet=True,
                    max_snippet_count=3
                ),
                # –î–û–î–ê–ù–û: Summary Spec
                summary_spec=summary_spec
            )
        )

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        response = client.search(request=request)

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è Cloud Function (—Å–∫–æ—Ä–æ—á–µ–Ω–µ)
        logger.info("üîç –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ Vertex AI")

        # –î–û–î–ê–ù–û: –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è Summary
        summary_text = ""
        if hasattr(response, 'summary') and response.summary:
            logger.info("üìù Summary –∑–Ω–∞–π–¥–µ–Ω–æ")

            if hasattr(response.summary, 'summary_text') and response.summary.summary_text:
                summary_text = response.summary.summary_text
                logger.info(f"Summary text –¥–æ–≤–∂–∏–Ω–∞: {len(summary_text)}")

                # –õ–æ–≥—É—î–º–æ –ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –¥–µ–±–∞–≥—É
                logger.info(f"Summary preview: {summary_text[:200]}...")
            else:
                logger.warning("Summary text –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–æ–º—É summary –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
                if hasattr(response.summary, 'summary_skipped_reasons'):
                    logger.warning(f"Summary skipped reasons: {response.summary.summary_skipped_reasons}")
        else:
            logger.warning("Summary –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if hasattr(response, 'results'):
            logger.info(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {len(response.results)}")

        results = []
        for i, result in enumerate(response.results):
            logger.info(f"üìÑ –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É #{i + 1}")

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è document
            document = result.document

            # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ
            title = ""
            snippet = ""
            link = ""

            if hasattr(document, 'derived_struct_data'):
                derived_data = dict(document.derived_struct_data)
                title = derived_data.get("title", "")
                link = derived_data.get("link", "")

                # –í–∏—Ç—è–≥—É—î–º–æ snippets
                snippets_array = derived_data.get("snippets", [])
                if snippets_array:
                    snippet_parts = []

                    for j, snippet_obj in enumerate(snippets_array):
                        snippet_dict = dict(snippet_obj)

                        snippet_status = snippet_dict.get("snippet_status", "")
                        snippet_text = snippet_dict.get("snippet", "")

                        if snippet_status == "SUCCESS" and snippet_text:
                            clean_text = _clean_html_text(snippet_text)
                            if clean_text:
                                snippet_parts.append(clean_text)
                        elif snippet_status == "NO_SNIPPET_AVAILABLE":
                            snippet_parts.append("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

                    snippet = " ".join(snippet_parts)

            results.append({
                "title": title or f"–î–æ–∫—É–º–µ–Ω—Ç {i + 1}",
                "snippet": snippet or "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π",
                "link": link
            })

        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

        if not results:
            return "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ**\n\n–°–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–∏–Ω–æ–Ω—ñ–º–∏\n‚Ä¢ –°–∫–æ—Ä–æ—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç"

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑ summary
        formatted_summary = _format_summary(summary_text) if summary_text else None
        formatted_results = _format_search_results(results, query, formatted_summary)

        logger.info("‚úÖ –ü–æ—à—É–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return formatted_results

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {str(e)}")
        return f"‚ö†Ô∏è **–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É**\n\n–î–µ—Ç–∞–ª—ñ: {str(e)}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."