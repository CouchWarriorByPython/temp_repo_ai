"""
–ú–æ–¥—É–ª—å –¥–ª—è Vertex AI Search –±–µ–∑ functions_framework
–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
"""

import logging
from typing import Dict, Any, List
from google.cloud import discoveryengine_v1

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
PROJECT_ID = "dulcet-path-462314-f8"
LOCATION = "eu"
SEARCH_ENGINE_ID = "ai-search-chat-bot_1749399060664"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def _split_snippet_to_bullets(snippet: str, max_length: int = 120) -> List[str]:
    """–†–æ–∑–±–∏–≤–∞—î –¥–æ–≤–≥–∏–π snippet –Ω–∞ bullet points."""
    if len(snippet) <= max_length:
        return [snippet]

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
    sentences = snippet.split('. ')
    bullets = []
    current_bullet = ""

    for sentence in sentences:
        sentence = sentence.strip()
        if not sentence:
            continue

        # –î–æ–¥–∞—î–º–æ –∫—Ä–∞–ø–∫—É —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if not sentence.endswith('.'):
            sentence += '.'

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π bullet
        if len(current_bullet + sentence) <= max_length:
            current_bullet += sentence + " "
        else:
            if current_bullet:
                bullets.append(current_bullet.strip())
            current_bullet = sentence + " "

    # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π bullet
    if current_bullet:
        bullets.append(current_bullet.strip())

    return bullets[:3]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 3 bullet points


def _format_search_results(results: List[Dict], query: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É —É –∫—Ä–∞—Å–∏–≤–æ–º—É –≤–∏–≥–ª—è–¥—ñ."""

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    header = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è:** `{query}`\n"

    formatted_items = []

    for i, result in enumerate(results, 1):
        title = result["title"] or f"–î–æ–∫—É–º–µ–Ω—Ç {i}"
        snippet = result["snippet"] or "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
        link = result["link"]

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è gs:// –Ω–∞ –ø—É–±–ª—ñ—á–Ω–µ https-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
        if link.startswith("gs://"):
            path = link.replace("gs://", "")
            link = f"https://storage.cloud.google.com/{path}"

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        item_text = f"**{i}. {title}**\n"

        # –î–æ–¥–∞—î–º–æ snippet –∑ bullet points –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        if snippet and snippet != "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π":
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–æ–≤–≥—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –Ω–∞ bullet points
            snippet_parts = _split_snippet_to_bullets(snippet)
            for part in snippet_parts:
                item_text += f"   ‚Ä¢ {part}\n"
        else:
            item_text += f"   ‚Ä¢ _–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π_\n"

        # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω–∫ –∑ —ñ–∫–æ–Ω–∫–æ—é
        item_text += f"   üìé [–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç]({link})"

        formatted_items.append(item_text)

    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º –∑ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏
    full_response = header + "\n" + "\n\n".join(formatted_items)

    # –î–æ–¥–∞—î–º–æ —Ñ—É—Ç–µ—Ä –∑ –ø–æ—Ä–∞–¥–∞–º–∏
    footer = "\n\nüí° **–ü–æ—Ä–∞–¥–∏:**\n‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ª—ñ–Ω–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n‚Ä¢ –£—Ç–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"

    return full_response + footer


def search_vertex_ai(query: str) -> str:
    """–í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ Vertex AI Search —ñ —Ñ–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Discovery Engine
        client_options = {"api_endpoint": "eu-discoveryengine.googleapis.com"}
        client = discoveryengine_v1.SearchServiceClient(client_options=client_options)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        serving_config = (
            f"projects/{PROJECT_ID}/locations/{LOCATION}/collections/default_collection/engines/{SEARCH_ENGINE_ID}/servingConfigs/default_search"
        )

        request = discoveryengine_v1.SearchRequest(
            serving_config=serving_config,
            query=query,
            page_size=5,  # –ó–±—ñ–ª—å—à–∏–≤ –¥–æ 5 –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            spell_correction_spec=discoveryengine_v1.SearchRequest.SpellCorrectionSpec(
                mode=discoveryengine_v1.SearchRequest.SpellCorrectionSpec.Mode.AUTO
            ),
            content_search_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec(
                snippet_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SnippetSpec(
                    return_snippet=True,
                    max_snippet_count=3
                )
            )
        )

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        response = client.search(request=request)

        print("\n" + "="*80)
        print("üîç –î–ï–¢–ê–õ–¨–ù–ò–ô –í–ò–í–Ü–î –í–Ü–î–ü–û–í–Ü–î–Ü –í–Ü–î VERTEX AI")
        print("="*80)

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        print(f"üìä –¢–∏–ø response: {type(response)}")
        print(f"üìä –ê—Ç—Ä–∏–±—É—Ç–∏ response: {dir(response)}")

        if hasattr(response, 'results'):
            print(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {len(response.results)}")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è summary —è–∫—â–æ —î
        if hasattr(response, 'summary') and response.summary:
            print(f"\nüìù SUMMARY:")
            print(f"   –¢–∏–ø: {type(response.summary)}")
            print(f"   –ê—Ç—Ä–∏–±—É—Ç–∏: {dir(response.summary)}")
            if hasattr(response.summary, 'summary_text'):
                print(f"   Summary text: {response.summary.summary_text}")

        results = []
        for i, result in enumerate(response.results):
            print(f"\nüìÑ –†–ï–ó–£–õ–¨–¢–ê–¢ #{i+1}")
            print("-" * 40)
            print(f"–¢–∏–ø result: {type(result)}")
            print(f"–ê—Ç—Ä–∏–±—É—Ç–∏ result: {dir(result)}")

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è document
            document = result.document
            print(f"\n–¢–∏–ø document: {type(document)}")
            print(f"–ê—Ç—Ä–∏–±—É—Ç–∏ document: {dir(document)}")

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è derived_struct_data
            if hasattr(document, 'derived_struct_data'):
                print(f"\n–¢–∏–ø derived_struct_data: {type(document.derived_struct_data)}")
                print(f"–ö–ª—é—á—ñ derived_struct_data: {list(document.derived_struct_data.keys())}")
                print(f"–í–µ—Å—å derived_struct_data: {dict(document.derived_struct_data)}")

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è struct_data
            if hasattr(document, 'struct_data'):
                print(f"\n–¢–∏–ø struct_data: {type(document.struct_data)}")
                if document.struct_data:
                    print(f"–ö–ª—é—á—ñ struct_data: {list(document.struct_data.keys())}")
                    print(f"–í–µ—Å—å struct_data: {dict(document.struct_data)}")

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è json_data
            if hasattr(document, 'json_data'):
                print(f"\n–¢–∏–ø json_data: {type(document.json_data)}")
                if document.json_data:
                    print(f"json_data: {document.json_data}")

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è content
            if hasattr(document, 'content'):
                print(f"\n–¢–∏–ø content: {type(document.content)}")
                if document.content:
                    print(f"content: {document.content}")

            # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            title = ""
            snippet = ""
            link = ""

            # –°–ø—Ä–æ–±—É—î–º–æ derived_struct_data
            if hasattr(document, 'derived_struct_data'):
                derived_data = dict(document.derived_struct_data)
                title = derived_data.get("title", "")
                link = derived_data.get("link", "")

                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏—Ç—è–≥—É—î–º–æ snippets –∑ –º–∞—Å–∏–≤—É
                snippets_array = derived_data.get("snippets", [])
                if snippets_array:
                    snippet_parts = []
                    for snippet_obj in snippets_array:
                        snippet_dict = dict(snippet_obj)
                        # –®—É–∫–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–ª—è—Ö snippet –æ–±'—î–∫—Ç—É
                        for key, value in snippet_dict.items():
                            if isinstance(value, str) and value.strip():
                                snippet_parts.append(value.strip())
                                break  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –∑–Ω–∞–π–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
                    snippet = " ".join(snippet_parts)

                print(f"\nüìé –í–∏—Ç—è–≥–Ω—É—Ç—ñ –¥–∞–Ω—ñ:")
                print(f"   Title: {title}")
                print(f"   Snippet: {snippet}")
                print(f"   Link: {link}")

                # –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø SNIPPETS
                if 'snippets' in derived_data:
                    snippets_array = derived_data['snippets']
                    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ò–ô –ê–ù–ê–õ–Ü–ó SNIPPETS:")
                    print(f"   –¢–∏–ø snippets: {type(snippets_array)}")
                    print(f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å snippets: {len(snippets_array)}")

                    for j, snippet_obj in enumerate(snippets_array):
                        print(f"\n   üìù Snippet #{j+1}:")
                        print(f"      –¢–∏–ø: {type(snippet_obj)}")
                        print(f"      –ê—Ç—Ä–∏–±—É—Ç–∏: {dir(snippet_obj)}")
                        print(f"      –í–µ—Å—å –æ–±'—î–∫—Ç: {dict(snippet_obj)}")

                        # –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –ø–æ–ª—è –∑ snippet –æ–±'—î–∫—Ç—É
                        snippet_dict = dict(snippet_obj)
                        for key, value in snippet_dict.items():
                            print(f"      {key}: {value}")

                # –®—É–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
                for key, value in derived_data.items():
                    if key not in ["title", "snippet", "link", "snippets"]:
                        print(f"   –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–ª–µ '{key}': {value}")

            results.append({
                "title": title,
                "snippet": snippet,
                "link": link,
                "raw_derived_data": dict(document.derived_struct_data) if hasattr(document, 'derived_struct_data') else {},
                "raw_struct_data": dict(document.struct_data) if hasattr(document, 'struct_data') and document.struct_data else {}
            })

        print("\n" + "="*80)
        print("üèÅ –ö–Ü–ù–ï–¶–¨ –î–ï–¢–ê–õ–¨–ù–û–ì–û –í–ò–í–û–î–£")
        print("="*80)

        if not results:
            return "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ**\n\n–°–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–∏–Ω–æ–Ω—ñ–º–∏\n‚Ä¢ –°–∫–æ—Ä–æ—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç"

        # –ü–æ–∫—Ä–∞—â–µ–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        formatted_results = _format_search_results(results, query)
        return formatted_results

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {str(e)}")
        return f"‚ö†Ô∏è **–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É**\n\n–î–µ—Ç–∞–ª—ñ: {str(e)}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."