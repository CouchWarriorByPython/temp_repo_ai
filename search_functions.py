"""
–ú–æ–¥—É–ª—å –¥–ª—è Vertex AI Search –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Summary –¥–ª—è Cloud Function
–í–µ—Ä—Å—ñ—è: v1.2.0-max-results
"""

import logging
import os
import re
from typing import Dict, Any, List
from google.cloud import discoveryengine_v1

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
PROJECT_ID = os.getenv("PROJECT_ID", "dulcet-path-462314-f8")
LOCATION = os.getenv("LOCATION", "eu")
SEARCH_ENGINE_ID = os.getenv("SEARCH_ENGINE_ID", "ai-search-chat-bot_1749399060664")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–µ—Ä—Å—ñ—è –º–æ–¥—É–ª—è
SEARCH_MODULE_VERSION = "v1.4.1-fix-summary-lines"
logger.info(f"üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ search_functions –≤–µ—Ä—Å—ñ—ó: {SEARCH_MODULE_VERSION}")


def _clean_html_text(text: str) -> str:
    """–û—á–∏—â—É—î HTML —Ç–µ–≥–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –∑ —Ç–µ–∫—Å—Ç—É."""
    if not text:
        return ""

    # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
    clean_text = re.sub(r'<[^>]+>', '', text)

    # –ó–∞–º—ñ–Ω—é—î–º–æ HTML entities
    clean_text = clean_text.replace('&nbsp;', ' ')
    clean_text = clean_text.replace('&#39;', "'")
    clean_text = clean_text.replace('&quot;', '"')
    clean_text = clean_text.replace('&amp;', '&')
    clean_text = clean_text.replace('&lt;', '<')
    clean_text = clean_text.replace('&gt;', '>')

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    clean_text = ' '.join(clean_text.split())

    return clean_text.strip()


def _split_snippet_to_bullets(snippet: str, max_length: int = 120) -> List[str]:
    """–†–æ–∑–±–∏–≤–∞—î –¥–æ–≤–≥–∏–π snippet –Ω–∞ bullet points."""
    if len(snippet) <= max_length:
        return [snippet]

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
    sentences = snippet.split('. ')
    bullets = []
    current_bullet = ""

    for sentence in sentences:
        sentence = sentence.strip()
        if not sentence:
            continue

        # –î–æ–¥–∞—î–º–æ –∫—Ä–∞–ø–∫—É —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if not sentence.endswith('.'):
            sentence += '.'

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π bullet
        if len(current_bullet + sentence) <= max_length:
            current_bullet += sentence + " "
        else:
            if current_bullet:
                bullets.append(current_bullet.strip())
            current_bullet = sentence + " "

    # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π bullet
    if current_bullet:
        bullets.append(current_bullet.strip())

    return bullets[:3]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 3 bullet points


def _format_summary(summary_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î summary –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Ä—è–¥–∫—ñ–≤, —Ä–æ–∑–±–∏–≤–∞—î –Ω–∞ –æ–∫—Ä–µ–º—ñ bullet points."""
    if not summary_text:
        return ""

    logger.info(f"üîß –ü–æ—á–∞—Ç–∫–æ–≤–∏–π summary (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): {summary_text[:200]}...")

    # –û—á–∏—â—É—î–º–æ HTML
    clean_summary = _clean_html_text(summary_text)

    # –ü–û–ö–†–ê–©–ï–ù–ò–ô –ê–õ–ì–û–†–ò–¢–ú: –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ –ø–∞—Ç–µ—Ä–Ω—É ". ‚Ä¢" –∞–±–æ ". -"
    # –¶–µ –¥–æ–∑–≤–æ–ª—è—î —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ bullet points –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∏ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É

    # –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–Ω–æ—Å —Ä—è–¥–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º bullet point
    clean_summary = re.sub(r'\.\s*([‚Ä¢-])', r'.\n\1', clean_summary)
    clean_summary = re.sub(r'^\s*([‚Ä¢-])', r'\1', clean_summary)  # –ü–µ—Ä—à–∏–π bullet point

    logger.info(f"üîß –ü—ñ—Å–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è bullet points: {clean_summary[:200]}...")

    # –¢–µ–ø–µ—Ä —Ä–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ —Ä—è–¥–∫–∞—Ö
    lines = clean_summary.split('\n')
    logger.info(f"üîß –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –ø—ñ—Å–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è: {len(lines)}")

    formatted_bullets = []

    for i, line in enumerate(lines):
        line = line.strip()
        if not line or len(line) < 5:
            continue

        logger.info(f"üîß –û–±—Ä–æ–±–∫–∞ —Ä—è–¥–∫–∞ {i+1}: {line[:100]}...")

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ —Ç–∏–ø—É [1], [2] —Ç–æ—â–æ
        line = re.sub(r'\[\d+\]', '', line)
        line = line.strip()

        if line:
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ bullet points
            if line.startswith('-'):
                line = '‚Ä¢' + line[1:]
            elif not line.startswith('‚Ä¢'):
                line = '‚Ä¢ ' + line

            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –ø—ñ—Å–ª—è ‚Ä¢
            line = re.sub(r'‚Ä¢\s+', '‚Ä¢ ', line)

            # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —â–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –∫—Ä–∞–ø–∫–æ—é
            if not line.endswith('.'):
                line += '.'

            formatted_bullets.append(line)

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–±–∏—Ç–∏ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
    if not formatted_bullets:
        logger.info("üîß Bullet points –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Ä–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö")
        sentences = clean_summary.split('. ')
        for sentence in sentences:
            sentence = sentence.strip()
            if sentence and len(sentence) > 10:
                # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞
                sentence = re.sub(r'\[\d+\]', '', sentence)
                sentence = sentence.strip()

                if sentence:
                    if not sentence.endswith('.'):
                        sentence += '.'
                    formatted_bullets.append(f"‚Ä¢ {sentence}")

    logger.info(f"üîß –§—ñ–Ω–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å bullet points: {len(formatted_bullets)}")

    # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ
    result = "\n".join(formatted_bullets[:10])
    logger.info(f"üîß –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): {result[:200]}...")

    return result


def _get_file_emoji(filename: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ñ–∞–π–ª—É."""
    filename_lower = filename.lower()

    if '.pdf' in filename_lower:
        return 'üìÑ'
    elif any(ext in filename_lower for ext in ['.xlsx', '.xls', '.csv']):
        return 'üìä'
    elif any(ext in filename_lower for ext in ['.doc', '.docx']):
        return 'üìù'
    elif any(ext in filename_lower for ext in ['.ppt', '.pptx']):
        return 'üìä'
    elif any(ext in filename_lower for ext in ['.txt', '.md']):
        return 'üìÑ'
    else:
        return 'üìã'


def _extract_filename_from_title(title: str) -> str:
    """–í–∏—Ç—è–≥–∞—î —ñ–º'—è —Ñ–∞–π–ª—É –∑ title —Ç–∞ –¥–æ–¥–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î."""
    if not title:
        return "–î–æ–∫—É–º–µ–Ω—Ç"

    # –Ø–∫—â–æ –≤–∂–µ —î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
    if '.' in title and any(ext in title.lower() for ext in ['.pdf', '.xlsx', '.xls', '.csv', '.doc', '.docx', '.txt']):
        return title

    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è - –¥–æ–¥–∞—î–º–æ .pdf —è–∫ default
    return f"{title}.pdf"


def _format_search_results(results: List[Dict], query: str, summary: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É —É –∫—Ä–∞—Å–∏–≤–æ–º—É –≤–∏–≥–ª—è–¥—ñ –∑ summary."""

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –µ–º–æ–¥–∑—ñ
    header = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è: `{query}`\n"

    response_parts = [header]

    # –î–æ–¥–∞—î–º–æ summary —è–∫—â–æ —î –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    if summary:
        summary_section = f"\nüìÑ –ü—ñ–¥—Å—É–º–æ–∫:\n{summary}\n"
        response_parts.append(summary_section)

    # –î–æ–¥–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –ø–µ—Ä–µ–¥ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if summary:
        response_parts.append("\nüìã –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n")

    formatted_items = []

    for result in results:  # –ü—Ä–∏–±—Ä–∞–ª–∏ enumerate –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–æ–º–µ—Ä–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
        title = result["title"] or "–î–æ–∫—É–º–µ–Ω—Ç"
        snippet = result["snippet"] or "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
        link = result["link"]

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è gs:// –Ω–∞ –ø—É–±–ª—ñ—á–Ω–µ https-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
        if link.startswith("gs://"):
            path = link.replace("gs://", "")
            link = f"https://storage.cloud.google.com/{path}"

        # –ü—Ä–æ—Å—Ç–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Google Chat - –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É + URL
        filename = _extract_filename_from_title(title)
        emoji = _get_file_emoji(filename)

        # Google Chat –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑—Ä–æ–±–∏—Ç—å URL –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–º
        item_text = f"üìé **{filename}**\n{link}\n"

        # –î–æ–¥–∞—î–º–æ snippet –∑ bullet points –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        if snippet and snippet != "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π":
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–æ–≤–≥—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –Ω–∞ bullet points
            snippet_parts = _split_snippet_to_bullets(snippet)
            for part in snippet_parts:
                item_text += f"‚Ä¢ {part}\n"
        else:
            item_text += f"‚Ä¢ _–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π_\n"

        formatted_items.append(item_text.rstrip())

    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å–µ —Ä–∞–∑–æ–º
    if formatted_items:
        response_parts.append("\n\n".join(formatted_items))

    # –î–æ–¥–∞—î–º–æ —Ñ—É—Ç–µ—Ä –∑ –ø–æ—Ä–∞–¥–∞–º–∏ —Ç–∞ –µ–º–æ–¥–∑—ñ
    footer = "\n\nüí° –ü–æ—Ä–∞–¥–∏:\n‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–∞–∑–≤—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É\n‚Ä¢ –£—Ç–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
    response_parts.append(footer)

    return "".join(response_parts)


def search_vertex_ai_structured(query: str) -> Dict[str, Any]:
    """–í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ Vertex AI Search —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è Cards API."""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Discovery Engine
        client_options = {"api_endpoint": f"{LOCATION}-discoveryengine.googleapis.com"}
        client = discoveryengine_v1.SearchServiceClient(client_options=client_options)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        serving_config = (
            f"projects/{PROJECT_ID}/locations/{LOCATION}/collections/default_collection/engines/{SEARCH_ENGINE_ID}/servingConfigs/default_search"
        )

        # Summary Spec –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥—Å—É–º–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
        summary_spec = discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec(
            summary_result_count=10,  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ë–Ü–õ–¨–®–ï–ù–û: –±—ñ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è summary
            include_citations=True,
            ignore_adversarial_query=True,
            ignore_non_summary_seeking_query=True,
            model_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec.ModelSpec(
                version="stable"
            ),
            model_prompt_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec.ModelPromptSpec(
                preamble=f"–°—Ç–≤–æ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ –¥–ª—è –∑–∞–ø–∏—Ç—É '{query}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¢–Ü–õ–¨–ö–ò —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É, —â–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É. –ù–µ –¥–æ–¥–∞–≤–∞–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–æ—á–Ω–æ —Ç–∞–∫—ñ –∂ —Å–ª–æ–≤–∞ —Ç–∞ —Ç–µ—Ä–º—ñ–Ω–∏ —è–∫ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –í–∫–ª—é—á—ñ—Ç—å –Ω–∞–∑–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤-–¥–∂–µ—Ä–µ–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ **–Ω–∞–∑–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞**. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ —è–∫ —Å–ø–∏—Å–æ–∫ –∑ bullet points, –∫–æ–∂–µ–Ω –ø—É–Ω–∫—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '‚Ä¢'. –ú–∞–∫—Å–∏–º—É–º 30 —Ä–µ—á–µ–Ω—å. –§–æ–∫—É—Å—É–π—Ç–µ—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –¥–µ—Ç–∞–ª—è—Ö —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –∑–∞–ø–∏—Ç—É."
            )
        )

        request = discoveryengine_v1.SearchRequest(
            serving_config=serving_config,
            query=query,
            page_size=10,  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ë–Ü–õ–¨–®–ï–ù–û: –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            language_code="uk-UA",
            user_info=discoveryengine_v1.UserInfo(
                user_id="chatbot_user",
                time_zone="Europe/Kiev"
            ),
            spell_correction_spec=discoveryengine_v1.SearchRequest.SpellCorrectionSpec(
                mode=discoveryengine_v1.SearchRequest.SpellCorrectionSpec.Mode.AUTO
            ),
            content_search_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec(
                snippet_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SnippetSpec(
                    return_snippet=True,
                    max_snippet_count=3
                ),
                summary_spec=summary_spec
            )
        )

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        response = client.search(request=request)

        logger.info("üîç –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ Vertex AI")

        # –û–±—Ä–æ–±–∫–∞ Summary
        summary_text = ""
        if hasattr(response, 'summary') and response.summary:
            if hasattr(response.summary, 'summary_text') and response.summary.summary_text:
                summary_text = _format_summary(response.summary.summary_text)

        # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        results = []
        for idx, result in enumerate(response.results):
            document = result.document
            title = ""
            snippet = ""
            link = ""

            if hasattr(document, 'derived_struct_data'):
                derived_data = dict(document.derived_struct_data)
                title = derived_data.get("title", "")
                link = derived_data.get("link", "")

                # –í–∏—Ç—è–≥—É—î–º–æ snippets
                snippets_array = derived_data.get("snippets", [])
                if snippets_array:
                    snippet_parts = []
                    for snippet_obj in snippets_array:
                        snippet_dict = dict(snippet_obj)
                        snippet_status = snippet_dict.get("snippet_status", "")
                        snippet_text = snippet_dict.get("snippet", "")

                        if snippet_status == "SUCCESS" and snippet_text:
                            clean_text = _clean_html_text(snippet_text)
                            if clean_text:
                                snippet_parts.append(clean_text)

                    snippet = " ".join(snippet_parts)

            # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–æ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
            filename = _extract_filename_from_title(title)

            results.append({
                "title": filename,
                "snippet": snippet or "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π",
                "link": link
            })

        logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        logger.info(f"üéØ –§—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: query='{query}', summary_bullets={summary_text.count('‚Ä¢') if summary_text else 0}, results_count={len(results)}")

        return {
            "query": query,
            "summary": summary_text,
            "results": results,
            "total_results": len(results)
        }

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–æ—à—É–∫—É: {str(e)}")
        raise e


def search_vertex_ai(query: str) -> str:
    """–í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ Vertex AI Search –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Summary."""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Discovery Engine
        client_options = {"api_endpoint": f"{LOCATION}-discoveryengine.googleapis.com"}
        client = discoveryengine_v1.SearchServiceClient(client_options=client_options)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        serving_config = (
            f"projects/{PROJECT_ID}/locations/{LOCATION}/collections/default_collection/engines/{SEARCH_ENGINE_ID}/servingConfigs/default_search"
        )

        # Summary Spec –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥—Å—É–º–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
        summary_spec = discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec(
            summary_result_count=5,  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è summary
            include_citations=True,  # –í–∫–ª—é—á–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞
            ignore_adversarial_query=True,  # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ —à–∫—ñ–¥–ª–∏–≤—ñ –∑–∞–ø–∏—Ç–∏
            ignore_non_summary_seeking_query=True,  # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ —â–æ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å summary
            model_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec.ModelSpec(
                version="stable"  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å—Ç–∞–±—ñ–ª—å–Ω—É –≤–µ—Ä—Å—ñ—é –º–æ–¥–µ–ª—ñ
            ),
            # –ü—Ä–æ–º—Ç –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏
            model_prompt_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SummarySpec.ModelPromptSpec(
                preamble="–ù–∞–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É, –Ω–µ –¥–æ–¥–∞–≤–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–æ—á–Ω–æ —Ç–∞–∫—ñ –∂ —Å–ª–æ–≤–∞ —è–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ—à—É–∫—É –∫–æ–ª–∏ —Ü–µ –º–æ–∂–ª–∏–≤–æ. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 20 —Ä–µ—á–µ–Ω—å. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —è–∫ —Å–ø–∏—Å–æ–∫ –∑ bullet points. –ö–æ–∂–µ–Ω –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫—É –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ —Å–∏–º–≤–æ–ª—É '‚Ä¢'."
            )
        )

        request = discoveryengine_v1.SearchRequest(
            serving_config=serving_config,
            query=query,
            page_size=10,  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ë–Ü–õ–¨–®–ï–ù–û: —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ structured —Ñ—É–Ω–∫—Ü—ñ—î—é
            language_code="uk-UA",  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
            user_info=discoveryengine_v1.UserInfo(
                user_id="chatbot_user",
                time_zone="Europe/Kiev"
            ),
            spell_correction_spec=discoveryengine_v1.SearchRequest.SpellCorrectionSpec(
                mode=discoveryengine_v1.SearchRequest.SpellCorrectionSpec.Mode.AUTO
            ),
            content_search_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec(
                snippet_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SnippetSpec(
                    return_snippet=True,
                    max_snippet_count=3
                ),
                summary_spec=summary_spec
            )
        )

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        response = client.search(request=request)

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è Cloud Function (—Å–∫–æ—Ä–æ—á–µ–Ω–µ)
        logger.info("üîç –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ Vertex AI")

        # –û–±—Ä–æ–±–∫–∞ Summary
        summary_text = ""
        if hasattr(response, 'summary') and response.summary:
            logger.info("üìù Summary –∑–Ω–∞–π–¥–µ–Ω–æ")

            if hasattr(response.summary, 'summary_text') and response.summary.summary_text:
                summary_text = response.summary.summary_text
                logger.info(f"Summary text –¥–æ–≤–∂–∏–Ω–∞: {len(summary_text)}")
                logger.info(f"Summary preview: {summary_text[:200]}...")
            else:
                logger.warning("Summary text –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

                if hasattr(response.summary, 'summary_skipped_reasons'):
                    logger.warning(f"Summary skipped reasons: {response.summary.summary_skipped_reasons}")
        else:
            logger.warning("Summary –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ –¥–µ—Ç–∞–ª—è–º–∏
        if hasattr(response, 'results'):
            logger.info(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤—ñ–¥ Vertex AI: {len(response.results)}")
            if summary_text:
                logger.info(f"üìù Summary –¥–æ–≤–∂–∏–Ω–∞: {len(summary_text)} —Å–∏–º–≤–æ–ª—ñ–≤")
                logger.info(f"üìù Summary bullet points: {summary_text.count('‚Ä¢')}")
            else:
                logger.info("üìù Summary –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")

        results = []
        for idx, result in enumerate(response.results):
            logger.info(f"üìÑ –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É #{idx + 1}")

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è document
            document = result.document

            # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ
            title = ""
            snippet = ""
            link = ""

            if hasattr(document, 'derived_struct_data'):
                derived_data = dict(document.derived_struct_data)
                title = derived_data.get("title", "")
                link = derived_data.get("link", "")

                # –í–∏—Ç—è–≥—É—î–º–æ snippets
                snippets_array = derived_data.get("snippets", [])
                if snippets_array:
                    snippet_parts = []

                    for snippet_idx, snippet_obj in enumerate(snippets_array):
                        snippet_dict = dict(snippet_obj)

                        snippet_status = snippet_dict.get("snippet_status", "")
                        snippet_text = snippet_dict.get("snippet", "")

                        if snippet_status == "SUCCESS" and snippet_text:
                            clean_text = _clean_html_text(snippet_text)
                            if clean_text:
                                snippet_parts.append(clean_text)
                        elif snippet_status == "NO_SNIPPET_AVAILABLE":
                            snippet_parts.append("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

                    snippet = " ".join(snippet_parts)

            results.append({
                "title": title or "–î–æ–∫—É–º–µ–Ω—Ç",
                "snippet": snippet or "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π",
                "link": link
            })

        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

        if not results:
            return "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n\n–°–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–∏–Ω–æ–Ω—ñ–º–∏\n‚Ä¢ –°–∫–æ—Ä–æ—Ç–∏—Ç–∏ –∑–∞–ø–∏—Ç"

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑ summary
        formatted_summary = _format_summary(summary_text) if summary_text else None
        formatted_results = _format_search_results(results, query, formatted_summary)

        logger.info("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –≤–µ–±-—Ç–µ—Å—Ç–µ—Ä–∞: query='{query}', summary_bullets={formatted_summary.count('‚Ä¢') if formatted_summary else 0}, results_count={len(results)}")
        return formatted_results

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {str(e)}")
        return f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É\n\n–î–µ—Ç–∞–ª—ñ: {str(e)}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."