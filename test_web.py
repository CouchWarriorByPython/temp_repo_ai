#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π –≤–µ–±-—Ç–µ—Å—Ç–µ—Ä –¥–ª—è Vertex AI Search
"""

import os
import time
from flask import Flask, request, render_template_string
from markupsafe import Markup

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ credentials
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "credentials.json"

from search_functions import search_vertex_ai

app = Flask(__name__)

# HTML —à–∞–±–ª–æ–Ω
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vertex AI Search Bot - –¢–µ—Å—Ç–µ—Ä</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
            color: #555;
        }
        input[type="text"] {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            box-sizing: border-box;
        }
        input[type="text"]:focus {
            border-color: #4285f4;
            outline: none;
        }
        button {
            background-color: #4285f4;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #3367d6;
        }
        .quick-tests {
            margin: 20px 0;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }
        .quick-test-btn {
            display: inline-block;
            margin: 5px;
            padding: 8px 15px;
            background-color: #6c757d;
            color: white;
            text-decoration: none;
            border-radius: 3px;
            font-size: 14px;
        }
        .quick-test-btn:hover {
            background-color: #5a6268;
            text-decoration: none;
            color: white;
        }
        .result {
            margin-top: 30px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 5px;
            border-left: 4px solid #4285f4;
        }
        .error {
            background-color: #f8d7da;
            border-left-color: #dc3545;
            color: #721c24;
        }
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        .metadata {
            margin-top: 15px;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 3px;
            font-size: 14px;
            color: #6c757d;
        }
        .raw-data {
            margin-top: 15px;
            padding: 15px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            max-height: 400px;
            overflow-y: auto;
        }
        .raw-data h4 {
            margin-top: 0;
            color: #495057;
        }
        .raw-data-toggle {
            background: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
            margin-top: 10px;
        }
        pre {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Vertex AI Search Bot - –¢–µ—Å—Ç–µ—Ä</h1>

        <form method="POST">
            <div class="form-group">
                <label for="query">–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç:</label>
                <input type="text" id="query" name="query" value="{{ query or '' }}" 
                       placeholder="–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —ñ–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å—ñ–≤" required>
            </div>

            <button type="submit">üîç –í–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ—à—É–∫</button>
        </form>

        <div class="quick-tests">
            <strong>–®–≤–∏–¥–∫—ñ —Ç–µ—Å—Ç–∏:</strong><br>
            <a href="?q=—ñ–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å—ñ–≤" class="quick-test-btn">—ñ–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å—ñ–≤</a>
            <a href="?q=–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏" class="quick-test-btn">–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏</a>
            <a href="?q=–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API" class="quick-test-btn">–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API</a>
            <a href="?q=–µ—Ç–∞–ø" class="quick-test-btn">–µ—Ç–∞–ø</a>
            <a href="?q=—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è" class="quick-test-btn">—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è</a>
        </div>

        {% if result %}
        <div class="result {% if error %}error{% endif %}">
            <h3>üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É{% if query %} –¥–ª—è: "{{ query }}"{% endif %}</h3>
            <pre>{{ result }}</pre>

            {% if not error and metadata %}
            <div class="metadata">
                <strong>üìä –ú–µ—Ç–∞–¥–∞–Ω—ñ:</strong><br>
                ‚Ä¢ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {{ metadata.execution_time }}—Å<br>
                ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤: {{ metadata.lines_count }}<br>
                ‚Ä¢ –î–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É: {{ metadata.text_length }} —Å–∏–º–≤–æ–ª—ñ–≤<br>
                ‚Ä¢ Bullet points: {{ metadata.bullet_count }}<br>
                ‚Ä¢ –õ—ñ–Ω–∫—ñ–≤: {{ metadata.links_count }}

                <button class="raw-data-toggle" onclick="toggleRawData()">üîç –ü–æ–∫–∞–∑–∞—Ç–∏/–°—Ö–æ–≤–∞—Ç–∏ Raw –¥–∞–Ω—ñ</button>

                <div id="raw-data" class="raw-data" style="display: none;">
                    <h4>üî¨ Raw –¥–∞–Ω—ñ –≤—ñ–¥ Vertex AI:</h4>
                    <p><em>–î–∏–≤—ñ—Ç—å—Å—è –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É –≤—Å—ñ—Ö API –¥–∞–Ω–∏—Ö</em></p>
                    {% if metadata.raw_info %}
                    <pre>{{ metadata.raw_info }}</pre>
                    {% endif %}
                </div>
            </div>
            {% endif %}
        </div>
        {% endif %}

        <div style="margin-top: 40px; text-align: center; color: #666; font-size: 14px;">
            <p>üí° –¶–µ–π —Ç–µ—Å—Ç–µ—Ä –¥–æ–ø–æ–º–∞–≥–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É</p>
            <p>–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ –¥–µ–ø–ª–æ—ó—Ç–∏ –≤ Cloud Function</p>
        </div>
    </div>
</body>
</html>
"""


@app.route('/', methods=['GET', 'POST'])
def index():
    query = None
    result = None
    error = False
    metadata = None

    if request.method == 'POST':
        query = request.form.get('query', '').strip()
    elif request.method == 'GET':
        query = request.args.get('q', '').strip()

    if query:
        try:
            print(f"üîç –¢–µ—Å—Ç—É—é –∑–∞–ø–∏—Ç: {query}")

            # –ó–∞–º—ñ—Ä —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            start_time = time.time()
            result = search_vertex_ai(query)
            execution_time = round(time.time() - start_time, 2)

            # –ó–±—ñ—Ä –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            lines = result.split('\n')
            metadata = {
                'execution_time': execution_time,
                'lines_count': len(lines),
                'text_length': len(result),
                'bullet_count': result.count('‚Ä¢'),
                'links_count': result.count('üìé'),
                'raw_info': f"–î–∏–≤—ñ—Ç—å—Å—è –∫–æ–Ω—Å–æ–ª—å —Ç–µ—Ä–º—ñ–Ω–∞–ª—É –¥–µ –∑–∞–ø—É—â–µ–Ω–æ test_web.py –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É Vertex AI API"
            }

            print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ {execution_time}—Å")

        except Exception as e:
            result = f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n‚Ä¢ credentials.json —ñ—Å–Ω—É—î\n‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Vertex AI\n‚Ä¢ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è"
            error = True
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    return render_template_string(
        HTML_TEMPLATE,
        query=query,
        result=result,
        error=error,
        metadata=metadata
    )


@app.route('/health')
def health():
    """Health check endpoint"""
    return {"status": "healthy", "service": "vertex-ai-search-tester"}


if __name__ == '__main__':
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ credentials
    if not os.path.exists("credentials.json"):
        print("‚ùå –§–∞–π–ª credentials.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ service account key –∑ GCP Console")
        exit(1)

    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Ç–µ—Å—Ç–µ—Ä–∞...")
    print("üìç –í—ñ–¥–∫—Ä–∏–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8080")
    print("üí° –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")

    app.run(host='0.0.0.0', port=8080, debug=True)