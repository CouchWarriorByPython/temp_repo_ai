import re
from typing import List

from logger import get_logger

logger = get_logger(__name__)


def clean_html_text(text: str) -> str:
    """–û—á–∏—â—É—î HTML —Ç–µ–≥–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –∑ —Ç–µ–∫—Å—Ç—É."""
    if not text:
        return ""

    # –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
    clean_text = re.sub(r'<[^>]+>', '', text)

    # –ó–∞–º—ñ–Ω—é—î–º–æ HTML entities
    clean_text = clean_text.replace('&nbsp;', ' ')
    clean_text = clean_text.replace('&#39;', "'")
    clean_text = clean_text.replace('&quot;', '"')
    clean_text = clean_text.replace('&amp;', '&')
    clean_text = clean_text.replace('&lt;', '<')
    clean_text = clean_text.replace('&gt;', '>')

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    clean_text = ' '.join(clean_text.split())

    return clean_text.strip()


def split_snippet_to_bullets(snippet: str, max_length: int = 120) -> List[str]:
    """–†–æ–∑–±–∏–≤–∞—î –¥–æ–≤–≥–∏–π snippet –Ω–∞ bullet points."""
    if len(snippet) <= max_length:
        return [snippet]

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
    sentences = snippet.split('. ')
    bullets = []
    current_bullet = ""

    for sentence in sentences:
        sentence = sentence.strip()
        if not sentence:
            continue

        # –î–æ–¥–∞—î–º–æ –∫—Ä–∞–ø–∫—É —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if not sentence.endswith('.'):
            sentence += '.'

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ–º—ñ—Å—Ç–∏—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–∏–π bullet
        if len(current_bullet + sentence) <= max_length:
            current_bullet += sentence + " "
        else:
            if current_bullet:
                bullets.append(current_bullet.strip())
            current_bullet = sentence + " "

    # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π bullet
    if current_bullet:
        bullets.append(current_bullet.strip())

    return bullets[:3]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 3 bullet points


def get_file_emoji(filename: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Ñ–∞–π–ª—É."""
    filename_lower = filename.lower()

    if '.pdf' in filename_lower:
        return 'üìÑ'
    elif any(ext in filename_lower for ext in ['.xlsx', '.xls', '.csv']):
        return 'üìä'
    elif any(ext in filename_lower for ext in ['.doc', '.docx']):
        return 'üìù'
    elif any(ext in filename_lower for ext in ['.ppt', '.pptx']):
        return 'üìä'
    elif any(ext in filename_lower for ext in ['.txt', '.md']):
        return 'üìÑ'
    else:
        return 'üìã'


def extract_filename_from_title(title: str) -> str:
    """–í–∏—Ç—è–≥–∞—î —ñ–º'—è —Ñ–∞–π–ª—É –∑ title —Ç–∞ –¥–æ–¥–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î."""
    if not title:
        return "–î–æ–∫—É–º–µ–Ω—Ç"

    # –Ø–∫—â–æ –≤–∂–µ —î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
    if '.' in title and any(ext in title.lower() for ext in ['.pdf', '.xlsx', '.xls', '.csv', '.doc', '.docx', '.txt']):
        return title

    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è - –¥–æ–¥–∞—î–º–æ .pdf —è–∫ default
    return f"{title}.pdf"


def format_summary(summary_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î summary –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Ä—è–¥–∫—ñ–≤, —Ä–æ–∑–±–∏–≤–∞—î –Ω–∞ –æ–∫—Ä–µ–º—ñ bullet points."""
    if not summary_text:
        return ""

    logger.info(f"üîß –ü–æ—á–∞—Ç–∫–æ–≤–∏–π summary (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): {summary_text[:200]}...")

    # –û—á–∏—â—É—î–º–æ HTML
    clean_summary = clean_html_text(summary_text)

    # –ü–û–ö–†–ê–©–ï–ù–ò–ô –ê–õ–ì–û–†–ò–¢–ú: –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ –ø–∞—Ç–µ—Ä–Ω—É ". ‚Ä¢" –∞–±–æ ". -"
    # –¶–µ –¥–æ–∑–≤–æ–ª—è—î —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ bullet points –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∏ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É

    # –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–Ω–æ—Å —Ä—è–¥–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º bullet point
    clean_summary = re.sub(r'\.\s*([‚Ä¢-])', r'.\n\1', clean_summary)
    clean_summary = re.sub(r'^\s*([‚Ä¢-])', r'\1', clean_summary)  # –ü–µ—Ä—à–∏–π bullet point

    logger.info(f"üîß –ü—ñ—Å–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è bullet points: {clean_summary[:200]}...")

    # –¢–µ–ø–µ—Ä —Ä–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ —Ä—è–¥–∫–∞—Ö
    lines = clean_summary.split('\n')
    logger.info(f"üîß –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –ø—ñ—Å–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è: {len(lines)}")

    formatted_bullets = []

    for i, line in enumerate(lines):
        line = line.strip()
        if not line or len(line) < 5:
            continue

        logger.info(f"üîß –û–±—Ä–æ–±–∫–∞ —Ä—è–¥–∫–∞ {i+1}: {line[:100]}...")

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞ —Ç–∏–ø—É [1], [2] —Ç–æ—â–æ
        line = re.sub(r'\[\d+\]', '', line)
        line = line.strip()

        if line:
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ bullet points
            if line.startswith('-'):
                line = '‚Ä¢' + line[1:]
            elif not line.startswith('‚Ä¢'):
                line = '‚Ä¢ ' + line

            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –ø—ñ—Å–ª—è ‚Ä¢
            line = re.sub(r'‚Ä¢\s+', '‚Ä¢ ', line)

            # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —â–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –∫—Ä–∞–ø–∫–æ—é
            if not line.endswith('.'):
                line += '.'

            formatted_bullets.append(line)

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–±–∏—Ç–∏ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö
    if not formatted_bullets:
        logger.info("üîß Bullet points –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Ä–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ —Ä–µ—á–µ–Ω–Ω—è—Ö")
        sentences = clean_summary.split('. ')
        for sentence in sentences:
            sentence = sentence.strip()
            if sentence and len(sentence) > 10:
                # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–∞
                sentence = re.sub(r'\[\d+\]', '', sentence)
                sentence = sentence.strip()

                if sentence:
                    if not sentence.endswith('.'):
                        sentence += '.'
                    formatted_bullets.append(f"‚Ä¢ {sentence}")

    logger.info(f"üîß –§—ñ–Ω–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å bullet points: {len(formatted_bullets)}")

    # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ
    result = "\n".join(formatted_bullets[:10])
    logger.info(f"üîß –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): {result[:200]}...")

    return result 