import json
import logging
from typing import Dict, Any, List

import functions_framework
from flask import jsonify, Request

from search_functions import search_vertex_ai_structured

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–ï–†–°–Ü–Ø –ö–û–î–£ –î–õ–Ø –ö–û–ù–¢–†–û–õ–Æ –î–ï–ü–õ–û–Æ
CODE_VERSION = "v1.4.1-fix-summary-lines"
logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Chat Bot –≤–µ—Ä—Å—ñ—ó: {CODE_VERSION}")


def create_chat_response(message: str) -> Dict[str, Any]:
    """–°—Ç–≤–æ—Ä—é—î –∑–≤–∏—á–∞–π–Ω—É —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è Google Chat."""
    return {
        "text": message
    }


def create_cards_response(query: str, summary: str, results: List[Dict]) -> Dict[str, Any]:
    """–°—Ç–≤–æ—Ä—é—î Cards –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è Google Chat –∑ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–º–∏ –ª—ñ–Ω–∫–∞–º–∏."""

    logger.info(
        f"üéØ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Cards –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: query='{query}', summary_length={len(summary) if summary else 0}, results_count={len(results)}")

    cards = []

    # –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞ –∫–∞—Ä—Ç–∫–∞
    header_card = {
        "header": {
            "title": "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É",
            "subtitle": f"–ó–∞–ø–∏—Ç: {query}",
            "imageUrl": "https://fonts.gstatic.com/s/i/short-term/release/googlesymbols/search/default/24px.svg"
        }
    }
    cards.append(header_card)

    # Summary –∫–∞—Ä—Ç–∫–∞ —è–∫—â–æ —î
    if summary:
        summary_lines = [line.strip() for line in summary.split('\n') if line.strip()]
        summary_widgets = []

        for line in summary_lines:
            if line.startswith('‚Ä¢'):
                summary_widgets.append({
                    "textParagraph": {
                        "text": f"<b>{line}</b>"
                    }
                })

        if summary_widgets:
            summary_card = {
                "sections": [{
                    "header": "üìÑ –ü—ñ–¥—Å—É–º–æ–∫",
                    "widgets": summary_widgets
                }]
            }
            cards.append(summary_card)

    # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–∞—Ä—Ç–∫–∏
    if results:
        logger.info(f"üìã –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –¥–ª—è {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        results_widgets = []

        for i, result in enumerate(results, 1):
            title = result.get("title", f"–î–æ–∫—É–º–µ–Ω—Ç {i}")
            snippet = result.get("snippet", "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
            link = result.get("link", "")

            logger.info(f"  üìÑ –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É {i}: {title}")

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ gs:// URL
            if link.startswith("gs://"):
                path = link.replace("gs://", "")
                link = f"https://storage.cloud.google.com/{path}"

            # –û–±—Ä—ñ–∑–∞—î–º–æ snippet –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è
            display_snippet = snippet[:100] + "..." if len(snippet) > 100 else snippet

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É –¥–ª—è —ñ–∫–æ–Ω–∫–∏
            file_emoji = "üìÑ"
            if ".xlsx" in title.lower() or ".xls" in title.lower() or ".csv" in title.lower():
                file_emoji = "üìä"
            elif ".doc" in title.lower():
                file_emoji = "üìù"

            widget = {
                "decoratedText": {
                    "topLabel": f"{file_emoji} –î–æ–∫—É–º–µ–Ω—Ç {i}",
                    "text": f"<b>{title}</b>",
                    "bottomLabel": display_snippet,
                    "onClick": {
                        "openLink": {
                            "url": link
                        }
                    },
                    "button": {
                        "text": "üìé –í—ñ–¥–∫—Ä–∏—Ç–∏",
                        "onClick": {
                            "openLink": {
                                "url": link
                            }
                        }
                    }
                }
            }

            results_widgets.append(widget)

        logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(results_widgets)} –≤—ñ–¥–∂–µ—Ç—ñ–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

        if results_widgets:
            results_card = {
                "sections": [{
                    "header": "üìã –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    "widgets": results_widgets
                }]
            }
            cards.append(results_card)

    # –ü–æ—Ä–∞–¥–∏ –∫–∞—Ä—Ç–∫–∞
    tips_card = {
        "sections": [{
            "header": "üí° –ü–æ—Ä–∞–¥–∏",
            "widgets": [
                {
                    "textParagraph": {
                        "text": "‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–∞–∑–≤—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–±–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É\n‚Ä¢ –£—Ç–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
                    }
                }
            ]
        }]
    }
    cards.append(tips_card)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    response_data = {
        "cardsV2": [{"card": card} for card in cards]
    }

    # –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Ä–æ–∑–º—ñ—Ä—É JSON
    import json
    response_size = len(json.dumps(response_data, ensure_ascii=False))
    logger.info(f"üìä –†–æ–∑–º—ñ—Ä Cards –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response_size} –±–∞–π—Ç (–ª—ñ–º—ñ—Ç: 30000)")
    logger.info(f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ–∫: {len(cards)}")

    # –Ø–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π - –æ–±—Ä—ñ–∑–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    if response_size > 30000:  # 30KB safety margin
        logger.warning(f"‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞ ({response_size} –±–∞–π—Ç), –æ–±—Ä—ñ–∑–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
        # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ header, summary —ñ –ø–µ—Ä—à—ñ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        trimmed_cards = cards[:2]  # header + summary
        logger.info(
            f"üîÑ –ó–∞–ª–∏—à–∞—î–º–æ –ø–µ—Ä—à—ñ 2 –∫–∞—Ä—Ç–∫–∏: {[card.get('header', {}).get('title', 'Unknown') for card in trimmed_cards]}")

        if len(cards) > 2:  # —è–∫—â–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            # –ë–µ—Ä–µ–º–æ results card —ñ –æ–±—Ä—ñ–∑–∞—î–º–æ widgets
            results_card = cards[2].copy()
            if 'sections' in results_card and len(results_card['sections']) > 0:
                original_widgets = results_card['sections'][0].get('widgets', [])
                results_card['sections'][0]['widgets'] = original_widgets[:3]  # —Ç—ñ–ª—å–∫–∏ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                logger.info(f"‚úÇÔ∏è –û–±—Ä—ñ–∑–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ {len(original_widgets)} –¥–æ 3 –≤—ñ–¥–∂–µ—Ç—ñ–≤")
            trimmed_cards.append(results_card)

        response_data = {
            "cardsV2": [{"card": card} for card in trimmed_cards]
        }

        final_size = len(json.dumps(response_data, ensure_ascii=False))
        logger.info(f"üìâ –û–±—Ä—ñ–∑–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {final_size} –±–∞–π—Ç")
    else:
        logger.info(f"‚úÖ –†–æ–∑–º—ñ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ {len(cards)} –∫–∞—Ä—Ç–æ–∫")

    return response_data


@functions_framework.http
def chat_vertex_bot(request: Request):
    """HTTP Cloud Function –¥–ª—è –æ–±—Ä–æ–±–∫–∏ Google Chat webhooks."""

    # –î–û–î–ê–ù–û: Debug endpoint –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    if request.method == 'GET' and 'debug' in request.args:
        debug_query = request.args.get('q', '—ñ–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å—ñ–≤')

        # –°–∏–º—É–ª—é—î–º–æ –æ—á–∏—Å—Ç–∫—É –∑–≥–∞–¥–∫–∏ —è–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É Chat
        original_query = debug_query
        if debug_query.startswith('@Vertex AI Search Bot'):
            debug_query = debug_query.replace('@Vertex AI Search Bot', '').strip()

        try:
            search_data = search_vertex_ai_structured(debug_query)
            return jsonify({
                "debug": True,
                "version": CODE_VERSION,
                "prompt_type": "original_user_prompt",
                "original_query": original_query,
                "cleaned_query": debug_query,
                "results_count": len(search_data['results']),
                "summary_length": len(search_data['summary']) if search_data['summary'] else 0,
                "summary_bullets": search_data['summary'].count('‚Ä¢') if search_data['summary'] else 0,
                "results": [{"title": r['title'], "has_snippet": bool(r['snippet'])} for r in search_data['results']]
            })
        except Exception as e:
            return jsonify({"debug_error": str(e), "version": CODE_VERSION}), 500

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ç–æ–¥—É –∑–∞–ø–∏—Ç—É
    if request.method != 'POST':
        return jsonify({"error": "Only POST method allowed"}), 405

    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON –∑–∞–ø–∏—Ç—É –≤—ñ–¥ Google Chat
        request_json = request.get_json(silent=True)

        if not request_json:
            logger.error("–ü–æ—Ä–æ–∂–Ω—ñ–π JSON –∑–∞–ø–∏—Ç")
            return jsonify({"error": "Invalid JSON"}), 400

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {json.dumps(request_json, indent=2)}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–¥—ñ—ó
        event_type = request_json.get('type')

        if event_type == 'ADDED_TO_SPACE':
            # –í—ñ—Ç–∞–ª—å–Ω–∞ –∫–∞—Ä—Ç–∫–∞
            welcome_cards = {
                "cardsV2": [{
                    "card": {
                        "header": {
                            "title": "ü§ñ Vertex AI Search Bot",
                            "subtitle": "–í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ –¥–ª—è –ø–æ—à—É–∫—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤!"
                        },
                        "sections": [{
                            "header": "–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è",
                            "widgets": [
                                {
                                    "textParagraph": {
                                        "text": "<b>‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç</b>\n<b>‚Ä¢ –Ø –∑–Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏</b>\n<b>‚Ä¢ –û—Ç—Ä–∏–º–∞—î—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ –ª—ñ–Ω–∫–∞–º–∏</b>"
                                    }
                                }
                            ]
                        }, {
                            "header": "–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤",
                            "widgets": [
                                {
                                    "textParagraph": {
                                        "text": "‚Ä¢ \"—ñ–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å—ñ–≤\"\n‚Ä¢ \"–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏\"\n‚Ä¢ \"—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è\""
                                    }
                                }
                            ]
                        }]
                    }
                }]
            }

            return jsonify(welcome_cards)

        elif event_type == 'MESSAGE':
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_text = request_json.get('message', {}).get('text', '').strip()

            if not message_text:
                help_cards = {
                    "cardsV2": [{
                        "card": {
                            "header": {
                                "title": "üí¨ –Ø–∫ –∑–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç",
                                "subtitle": "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
                            },
                            "sections": [{
                                "widgets": [
                                    {
                                        "textParagraph": {
                                            "text": "<b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n‚Ä¢ \"–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API\"\n‚Ä¢ \"–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\"\n‚Ä¢ \"—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\""
                                        }
                                    }
                                ]
                            }]
                        }
                    }]
                }

                return jsonify(help_cards)

            # –í–∏–¥–∞–ª—è—î–º–æ –∑–≥–∞–¥–∫—É –±–æ—Ç–∞ —è–∫—â–æ —î
            if message_text.startswith('<users/'):
                # –§–æ—Ä–º–∞—Ç: <users/123456789012345678901> your query
                parts = message_text.split('> ', 1)
                if len(parts) > 1:
                    message_text = parts[1].strip()
                else:
                    response = create_chat_response(
                        "üí° –ù–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞.\n\n–ü—Ä–∏–∫–ª–∞–¥: `@bot –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API`")
                    return jsonify(response)

            # –î–û–î–ê–ù–û: –í–∏–¥–∞–ª—è—î–º–æ –∑–≥–∞–¥–∫—É –±–æ—Ç–∞ –∑ –ø–æ—á–∞—Ç–∫—É —Ç–µ–∫—Å—Ç—É
            if message_text.startswith('@Vertex AI Search Bot'):
                message_text = message_text.replace('@Vertex AI Search Bot', '').strip()
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞: '{message_text}'")

            # –¢–∞–∫–æ–∂ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —ñ–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–≥–∞–¥–æ–∫
            if message_text.startswith('@'):
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –ø—Ä–æ–±—ñ–ª –ø—ñ—Å–ª—è @ —ñ –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å–µ –¥–æ –Ω—å–æ–≥–æ
                parts = message_text.split(' ', 1)
                if len(parts) > 1:
                    message_text = parts[1].strip()
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ –∑–∞–≥–∞–ª—å–Ω—É –∑–≥–∞–¥–∫—É: '{message_text}'")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –∑–∞–ø–∏—Ç—É
            if len(message_text) < 3:
                response = create_chat_response(
                    "üîç **–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π**\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–æ–≤–∂–∏–Ω–æ—é —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª–∏.")
                return jsonify(response)

            logger.info(f"–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç: {message_text}")

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É
            try:
                # –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –ù–û–í–£ –°–¢–†–£–ö–¢–£–†–û–í–ê–ù–£ –§–£–ù–ö–¶–Ü–Æ
                search_data = search_vertex_ai_structured(message_text)

                # –î–û–î–ê–Ñ–ú–û –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø
                logger.info(f"üîç –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ Vertex AI:")
                logger.info(f"  üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {len(search_data['results'])}")
                logger.info(f"  üìù Summary –¥–æ–≤–∂–∏–Ω–∞: {len(search_data['summary']) if search_data['summary'] else 0}")
                logger.info(f"  üìÑ –ù–∞–∑–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {[r['title'] for r in search_data['results']]}")

                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è Cards API
                # Cards API –º–æ–∂–µ –æ–±—Ä–æ–±–∏—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —Ç–µ–∫—Å—Ç
                response = create_cards_response(
                    query=search_data["query"],
                    summary=search_data["summary"],
                    results=search_data["results"]
                )

                logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ Cards –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ {len(search_data['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
                return jsonify(response)

            except Exception as search_error:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {str(search_error)}")

                error_cards = {
                    "cardsV2": [{
                        "card": {
                            "header": {
                                "title": "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É",
                                "subtitle": "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É"
                            },
                            "sections": [{
                                "widgets": [
                                    {
                                        "textParagraph": {
                                            "text": f"<b>–ü–æ–º–∏–ª–∫–∞:</b> {str(search_error)}\n\n<b>–©–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏:</b>\n‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥\n‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π—Ç–µ –∑–∞–ø–∏—Ç\n‚Ä¢ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                                        }
                                    }
                                ]
                            }]
                        }
                    }]
                }

                return jsonify(error_cards), 500

        elif event_type == 'REMOVED_FROM_SPACE':
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–æ—Ç–∞
            logger.info("–ë–æ—Ç –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –ø—Ä–æ—Å—Ç–æ—Ä—É")
            return jsonify({"text": ""}), 200

        else:
            logger.info(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: {event_type}")
            return jsonify({"text": ""}), 200

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {str(e)}")

        error_cards = {
            "cardsV2": [{
                "card": {
                    "header": {
                        "title": "‚ö†Ô∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞",
                        "subtitle": "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É"
                    },
                    "sections": [{
                        "widgets": [
                            {
                                "textParagraph": {
                                    "text": "<b>–©–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏:</b>\n‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥\n‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π—Ç–µ –∑–∞–ø–∏—Ç\n‚Ä¢ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                                }
                            }
                        ]
                    }]
                }
            }]
        }

        return jsonify(error_cards), 500