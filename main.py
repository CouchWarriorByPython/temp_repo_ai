import json
import logging
from typing import Dict, Any

import functions_framework
from google.cloud import discoveryengine_v1
from flask import jsonify

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
PROJECT_ID = "dulcet-path-462314-f8"
LOCATION = "eu"
SEARCH_ENGINE_ID = "ai-search-chat-bot_1749399060664"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def search_vertex_ai(query: str) -> str:
    """–í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ Vertex AI Search —ñ —Ñ–æ—Ä–º—É—î —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Discovery Engine
        client_options = {"api_endpoint": "eu-discoveryengine.googleapis.com"}
        client = discoveryengine_v1.SearchServiceClient(client_options=client_options)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        serving_config = (
            f"projects/{PROJECT_ID}/locations/{LOCATION}/collections/default_collection/engines/{SEARCH_ENGINE_ID}/servingConfigs/default_search"
        )

        request = discoveryengine_v1.SearchRequest(
            serving_config=serving_config,
            query=query,
            page_size=3,
            spell_correction_spec=discoveryengine_v1.SearchRequest.SpellCorrectionSpec(
                mode=discoveryengine_v1.SearchRequest.SpellCorrectionSpec.Mode.AUTO
            ),
            content_search_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec(
                snippet_spec=discoveryengine_v1.SearchRequest.ContentSearchSpec.SnippetSpec(
                    return_snippet=True
                )
            )
        )

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        response = client.search(request=request)

        results = []
        for result in response.results:
            document = result.document
            title = document.derived_struct_data.get("title", "")
            snippet = document.derived_struct_data.get("snippet", "")
            link = document.derived_struct_data.get("link", "")

            results.append({
                "title": title,
                "snippet": snippet,
                "link": link
            })

        if not results:
            return "–ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É."

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        formatted_results = []
        for i, result in enumerate(results, 1):
            title = result["title"] or f"–î–æ–∫—É–º–µ–Ω—Ç {i}"
            snippet = result["snippet"] or "_(—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π)_"
            link = result["link"]

            # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è gs:// –Ω–∞ –ø—É–±–ª—ñ—á–Ω–µ https-–ø–æ—Å–∏–ª–∞–Ω–Ω—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            if link.startswith("gs://"):
                path = link.replace("gs://", "")
                link = f"https://storage.cloud.google.com/{path}"

            text = f"{i}. *{title}*\n_{snippet}_\nüìÑ [{title}]({link})"
            formatted_results.append(text)

        return "\n\n".join(formatted_results)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {str(e)}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."


def create_chat_response(message: str) -> Dict[str, Any]:
    """–°—Ç–≤–æ—Ä—é—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è Google Chat."""
    return {
        "text": message
    }


@functions_framework.http
def chat_vertex_bot(request):
    """HTTP Cloud Function –¥–ª—è –æ–±—Ä–æ–±–∫–∏ Google Chat webhooks."""

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ç–æ–¥—É –∑–∞–ø–∏—Ç—É
    if request.method != 'POST':
        return jsonify({"error": "Only POST method allowed"}), 405

    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON –∑–∞–ø–∏—Ç—É –≤—ñ–¥ Google Chat
        request_json = request.get_json(silent=True)

        if not request_json:
            logger.error("–ü–æ—Ä–æ–∂–Ω—ñ–π JSON –∑–∞–ø–∏—Ç")
            return jsonify({"error": "Invalid JSON"}), 400

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {json.dumps(request_json, indent=2)}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –ø–æ–¥—ñ—ó
        event_type = request_json.get('type')

        if event_type == 'ADDED_TO_SPACE':
            # –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–æ—Ç–∞
            response = create_chat_response(
                "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø AI Search Bot. –ù–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –∑–∞–ø–∏—Ç, —ñ —è –∑–Ω–∞–π–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ Vertex AI Search."
            )
            return jsonify(response)

        elif event_type == 'MESSAGE':
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_text = request_json.get('message', {}).get('text', '').strip()

            if not message_text:
                response = create_chat_response("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É.")
                return jsonify(response)

            # –í–∏–¥–∞–ª—è—î–º–æ –∑–≥–∞–¥–∫—É –±–æ—Ç–∞ —è–∫—â–æ —î
            if message_text.startswith('<users/'):
                # –§–æ—Ä–º–∞—Ç: <users/123456789012345678901> your query
                parts = message_text.split('> ', 1)
                if len(parts) > 1:
                    message_text = parts[1].strip()
                else:
                    response = create_chat_response("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞.")
                    return jsonify(response)

            logger.info(f"–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç: {message_text}")

            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É
            search_result = search_vertex_ai(message_text)

            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            response_text = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è:* {message_text}\n\n{search_result}"
            response = create_chat_response(response_text)

            return jsonify(response)

        else:
            logger.info(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: {event_type}")
            return jsonify({"text": ""}), 200

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {str(e)}")
        error_response = create_chat_response("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return jsonify(error_response), 500