import json
from typing import Dict, Any, List
import functions_framework
from flask import jsonify, Request
from config import config
from logger import get_logger
from search_functions import search_vertex_ai_structured

logger = get_logger(__name__)

try:
    config.validate()
    logger.info("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
    raise

logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Chat Bot –≤–µ—Ä—Å—ñ—ó: {config.CODE_VERSION}")


def create_chat_response(message: str) -> Dict[str, Any]:
    return {"text": message}


def create_cards_response(query: str, summary: str, results: List[Dict]) -> Dict[str, Any]:
    logger.info(f"üéØ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Cards –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: query='{query}', results_count={len(results)}")

    cards = [
        {
            "header": {
                "title": "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É",
                "subtitle": f"–ó–∞–ø–∏—Ç: {query}",
                "imageUrl": "https://fonts.gstatic.com/s/i/short-term/release/googlesymbols/search/default/24px.svg"
            }
        }
    ]

    if summary:
        summary_lines = [line.strip() for line in summary.split('\n') if line.strip()]
        summary_widgets = [
            {"textParagraph": {"text": f"<b>{line}</b>"}}
            for line in summary_lines if line.startswith('‚Ä¢')
        ]

        if summary_widgets:
            cards.append({
                "sections": [{
                    "header": "üìÑ –ü—ñ–¥—Å—É–º–æ–∫",
                    "widgets": summary_widgets
                }]
            })

    if results:
        results_widgets = []

        for i, result in enumerate(results, 1):
            title = result.get("title", f"–î–æ–∫—É–º–µ–Ω—Ç {i}")
            snippet = result.get("snippet", "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
            link = result.get("link", "")

            if link.startswith("gs://"):
                path = link.replace("gs://", "")
                link = f"https://storage.cloud.google.com/{path}"

            display_snippet = snippet[:100] + "..." if len(snippet) > 100 else snippet

            file_emoji = "üìÑ"
            if any(ext in title.lower() for ext in [".xlsx", ".xls", ".csv"]):
                file_emoji = "üìä"
            elif ".doc" in title.lower():
                file_emoji = "üìù"

            widget = {
                "decoratedText": {
                    "topLabel": f"{file_emoji} –î–æ–∫—É–º–µ–Ω—Ç {i}",
                    "text": f"<b>{title}</b>",
                    "bottomLabel": display_snippet,
                    "onClick": {"openLink": {"url": link}},
                    "button": {
                        "text": "üìé –í—ñ–¥–∫—Ä–∏—Ç–∏",
                        "onClick": {"openLink": {"url": link}}
                    }
                }
            }
            results_widgets.append(widget)

        if results_widgets:
            cards.append({
                "sections": [{
                    "header": "üìã –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    "widgets": results_widgets
                }]
            })

    cards.append({
        "sections": [{
            "header": "üí° –ü–æ—Ä–∞–¥–∏",
            "widgets": [{
                "textParagraph": {
                    "text": "‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–∞–∑–≤—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–±–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É\n‚Ä¢ –£—Ç–æ—á–Ω—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
                }
            }]
        }]
    })

    response_data = {"cardsV2": [{"card": card} for card in cards]}

    response_size = len(json.dumps(response_data, ensure_ascii=False))
    if response_size > 30000:
        logger.warning(f"‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∞ ({response_size} –±–∞–π—Ç), –æ–±—Ä—ñ–∑–∞—î–º–æ")
        trimmed_cards = cards[:2]
        if len(cards) > 2:
            results_card = cards[2].copy()
            if 'sections' in results_card and len(results_card['sections']) > 0:
                original_widgets = results_card['sections'][0].get('widgets', [])
                results_card['sections'][0]['widgets'] = original_widgets[:3]
            trimmed_cards.append(results_card)
        response_data = {"cardsV2": [{"card": card} for card in trimmed_cards]}

    return response_data


def clean_message_text(text: str) -> str:
    if text.startswith('<users/'):
        parts = text.split('> ', 1)
        text = parts[1].strip() if len(parts) > 1 else text

    text = text.replace('@Vertex AI Search Bot', '').strip()

    if text.startswith('@'):
        parts = text.split(' ', 1)
        text = parts[1].strip() if len(parts) > 1 else ""

    return text


@functions_framework.http
def chat_vertex_bot(request: Request):
    if request.method == 'GET' and 'debug' in request.args:
        debug_query = request.args.get('q', '—ñ–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å—ñ–≤')
        cleaned_query = clean_message_text(debug_query)

        try:
            search_data = search_vertex_ai_structured(cleaned_query)
            return jsonify({
                "debug": True,
                "version": config.CODE_VERSION,
                "original_query": debug_query,
                "cleaned_query": cleaned_query,
                "results_count": len(search_data['results']),
                "summary_length": len(search_data['summary']) if search_data['summary'] else 0,
                "summary_bullets": search_data['summary'].count('‚Ä¢') if search_data['summary'] else 0,
                "results": [{"title": r['title'], "has_snippet": bool(r['snippet'])} for r in search_data['results']]
            })
        except Exception as e:
            return jsonify({"debug_error": str(e), "version": config.CODE_VERSION}), 500

    if request.method != 'POST':
        return jsonify({"error": "Only POST method allowed"}), 405

    try:
        request_json = request.get_json(silent=True)
        if not request_json:
            return jsonify({"error": "Invalid JSON"}), 400

        event_type = request_json.get('type')

        if event_type == 'ADDED_TO_SPACE':
            return jsonify({
                "cardsV2": [{
                    "card": {
                        "header": {
                            "title": "ü§ñ Vertex AI Search Bot",
                            "subtitle": "–í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ –¥–ª—è –ø–æ—à—É–∫—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤!"
                        },
                        "sections": [
                            {
                                "header": "–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è",
                                "widgets": [{"textParagraph": {
                                    "text": "<b>‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç</b>\n<b>‚Ä¢ –Ø –∑–Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏</b>\n<b>‚Ä¢ –û—Ç—Ä–∏–º–∞—î—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ –ª—ñ–Ω–∫–∞–º–∏</b>"}}]
                            },
                            {
                                "header": "–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤",
                                "widgets": [{"textParagraph": {
                                    "text": "‚Ä¢ \"—ñ–º–ø–æ—Ä—Ç –ø—Ä–∞–π—Å—ñ–≤\"\n‚Ä¢ \"–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏\"\n‚Ä¢ \"—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è\""}}]
                            }
                        ]
                    }
                }]
            })

        elif event_type == 'MESSAGE':
            message_text = request_json.get('message', {}).get('text', '').strip()

            if not message_text:
                return jsonify({
                    "cardsV2": [{
                        "card": {
                            "header": {"title": "üí¨ –Ø–∫ –∑–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç", "subtitle": "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"},
                            "sections": [{"widgets": [{"textParagraph": {
                                "text": "<b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n‚Ä¢ \"–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API\"\n‚Ä¢ \"–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\"\n‚Ä¢ \"—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\""}}]}]
                        }
                    }]
                })

            message_text = clean_message_text(message_text)

            if len(message_text) < 3:
                return jsonify(create_chat_response(
                    "üîç **–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π**\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–æ–≤–∂–∏–Ω–æ—é —â–æ–Ω–∞–π–º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª–∏."
                ))

            logger.info(f"–ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç: {message_text}")

            try:
                search_data = search_vertex_ai_structured(message_text)
                response = create_cards_response(
                    query=search_data["query"],
                    summary=search_data["summary"],
                    results=search_data["results"]
                )
                return jsonify(response)

            except Exception as search_error:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {search_error}")
                return jsonify({
                    "cardsV2": [{
                        "card": {
                            "header": {"title": "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É", "subtitle": "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É"},
                            "sections": [{"widgets": [{"textParagraph": {
                                "text": f"<b>–ü–æ–º–∏–ª–∫–∞:</b> {search_error}\n\n<b>–©–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏:</b>\n‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥\n‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π—Ç–µ –∑–∞–ø–∏—Ç\n‚Ä¢ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}}]}]
                        }
                    }]
                }), 500

        elif event_type == 'REMOVED_FROM_SPACE':
            logger.info("–ë–æ—Ç –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –ø—Ä–æ—Å—Ç–æ—Ä—É")
            return jsonify({"text": ""}), 200

        else:
            logger.info(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–¥—ñ—ó: {event_type}")
            return jsonify({"text": ""}), 200

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {e}")
        return jsonify({
            "cardsV2": [{
                "card": {
                    "header": {"title": "‚ö†Ô∏è –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞", "subtitle": "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É"},
                    "sections": [{"widgets": [{"textParagraph": {
                        "text": "<b>–©–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏:</b>\n‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥\n‚Ä¢ –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π—Ç–µ –∑–∞–ø–∏—Ç\n‚Ä¢ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"}}]}]
                }
            }]
        }), 500